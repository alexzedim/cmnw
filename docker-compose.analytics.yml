version: '3.8'
services:
  loki:
    container_name: loki
    image: grafana/loki:latest
    restart: always
    ports:
      - '3100:3100'
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - loki

  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    restart: always
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml
    networks:
      - loki

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: always
    ports:
      - '9090:9090'
    volumes:
      - prometheus_data:/prometheus
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--log.level=info'
    networks:
      - loki
      - default

  postgres_exporter:
    container_name: postgres_exporter
    image: prometheuscommunity/postgres-exporter:latest
    restart: always
    ports:
      - '9187:9187'
    environment:
      DATA_SOURCE_NAME: ${DATA_SOURCE_NAME}
      PG_EXPORTER_WEB_LISTEN_ADDRESS: ":9187"
      PG_EXPORTER_WEB_TELEMETRY_PATH: "/metrics"
      PG_EXPORTER_DISABLE_SETTINGS_METRICS: false
    networks:
      - loki
      - default

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: always
    environment:
      GF_PATHS_PROVISIONING: ${GF_PATHS_PROVISIONING}
      GF_AUTH_ANONYMOUS_ENABLED: ${GF_AUTH_ANONYMOUS_ENABLED}
      GF_AUTH_ANONYMOUS_ORG_ROLE: ${GF_AUTH_ANONYMOUS_ORG_ROLE}
      GF_FEATURE_TOGGLES_ENABLE: ${GF_FEATURE_TOGGLES_ENABLE}
      GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_IGNORE_HTTPS_ERRORS: true
      GF_PLUGIN_PUBLIC_KEY_RETRIEVAL_DISABLED: true
      GF_ANALYTICS_CHECK_FOR_PLUGIN_UPDATES: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_INSTALL_IMAGE_RENDERER_PLUGIN: false
    ports:
      - '3000:3000'
    volumes:
      - grafana:/var/lib/grafana
    networks:
      - loki

  mcp-grafana:
    container_name: mcp-grafana
    image: mcp/grafana:latest
    restart: always
    environment:
      GRAFANA_URL: ${GRAFANA_URL}
      GRAFANA_SERVICE_ACCOUNT_TOKEN: ${GRAFANA_SERVICE_ACCOUNT_TOKEN}
    ports:
      - '8001:8001'
    command: ["--transport", "sse", "--address", "0.0.0.0:8001"]
    depends_on:
      - grafana
    networks:
      - loki

networks:
  loki:
    driver: bridge
  default:
    name: cmnw_default
    external: true

volumes:
  grafana:
  prometheus_data:


configs:
  prometheus_config:
    content: |
      global:
        scrape_interval: 15s
        evaluation_interval: 15s
        external_labels:
          cluster: 'cmnw-stack'
          environment: 'production'

      rule_files:
        # - "first_rules.yml"
        # - "second_rules.yml"

      scrape_configs:
        # Prometheus self-monitoring
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']
          scrape_interval: 30s

        # PostgreSQL metrics
        - job_name: 'postgres'
          static_configs:
            - targets: ['postgres_exporter:9187']
          scrape_interval: 30s
          metrics_path: /metrics

        # CMNW API metrics (updated port)
        - job_name: 'cmnw-api'
          static_configs:
            - targets: ['128.0.0.255:8080']
          scrape_interval: 15s
          metrics_path: /api/metrics
          scheme: http

        # CMNW Core service
        - job_name: 'cmnw-core'
          static_configs:
            - targets: ['core:3000']
          scrape_interval: 15s
          metrics_path: /metrics
          scheme: http
